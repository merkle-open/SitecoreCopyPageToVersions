<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition=" '$(OS)' == 'Windows_NT'">
    <!-- Windows specific commands -->
    <NuGetToolsPath>$([System.IO.Path]::Combine($(SolutionDir), ".nuget"))</NuGetToolsPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OS)' != 'Windows_NT'">
    <!-- We need to launch nuget.exe with the mono command if we're not on windows -->
    <NuGetToolsPath>$(SolutionDir).nuget</NuGetToolsPath>
  </PropertyGroup>

  <!-- 
    NuGet default properties
    Can be overwritten with MSBuild parameters (f.e. "... /p:BuildPackageCustom=false ...")
  -->
  <PropertyGroup>
    <!-- use custom nuget package build -->
    <BuildPackageCustom Condition="'$(BuildPackageCustom)' == ''">true</BuildPackageCustom>

    <!-- publish nuget packages -->
    <PublishPackage Condition="'$(PublishPackage)' == ''">true</PublishPackage>

    <!-- push to local nuget repository -->
    <NugetRepository Condition="'$(NugetRepository)' == ''">C:\nuget_local</NugetRepository>
    
    <!-- prerealse version suffix -->
    <PrereleaseVersion Condition="'$(PrereleaseVersion)' == ''"></PrereleaseVersion>
	
	  <!-- product version -->
    <ProductVersion Condition="'$(ProductVersion)' == ''">Sc90</ProductVersion>

  </PropertyGroup>

  <!-- get package version from versioning.target, if any -->
  <Choose>
    <When Condition="'$(PrereleaseVersion)' != ''">
      <PropertyGroup>
        <NugetPackageVersion>$(PackageVersion)-$(PrereleaseVersion)$([System.String]::Format('{0:000}', $([MSBuild]::Add($(BuildNumber), 0))))</NugetPackageVersion>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <NugetPackageVersion>$(PackageVersion)</NugetPackageVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      BuildPackageCustom;
      PublishPackage;
    </BuildDependsOn>

    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)\NuGet.exe</NuGetExePath>

    <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
    <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>

    <NugetRepository Condition="$(NugetRepository) == ''">C:\nuget_local</NugetRepository>

    <_NugetApiKey Condition="'$(NugetApiKey)' != ''"> -ApiKey "$(NugetApiKey)"</_NugetApiKey>

    <PackageOutputDir>$([System.IO.Path]::GetDirectoryName('$(ProjectDir)$(IntermediateOutputPath)'))</PackageOutputDir>
    <PackageSpec>$(ProjectPath.Replace('.csproj', '.nuspec'))</PackageSpec>
    <PackageOutput>$(ProjectName.Replace('.csproj', '')).*$(NugetPackageVersion).nupkg</PackageOutput>
    <PackageSymbolsOutput>$(ProjectName.Replace('.csproj', '')).*$(NugetPackageVersion).symbols.nupkg</PackageSymbolsOutput>

    <BuildCommandSolution Condition="'$(NugetPackageVersion)' != ''">$(NuGetCommand) pack "$(ProjectPath)" -Properties "Configuration=$(Configuration);Platform=$(Platform)" $(NonInteractiveSwitch) -OutputDirectory "$(PackageOutputDir)" -MSBuildVersion 14 -Symbols -IncludeReferencedProjects -Properties "ProductVersion=$(ProductVersion);DependentVersion=$(NugetPackageVersion)" -Version "$(NugetPackageVersion)"</BuildCommandSolution>
    <BuildCommandSolution Condition="'$(NugetPackageVersion)' == ''">$(NuGetCommand) pack "$(ProjectPath)" -Properties "Configuration=$(Configuration);Platform=$(Platform)" $(NonInteractiveSwitch) -OutputDirectory "$(PackageOutputDir)" -MSBuildVersion 14 -Symbols -IncludeReferencedProjects -Properties "ProductVersion=$(ProductVersion)"</BuildCommandSolution>

    <!--<PublishCommand>$(NuGetCommand) push "$(PackageOutputDir)\$(PackageOutput)" $(_NugetApiKey) -source "$(NugetRepository)"</PublishCommand>-->
    <PublishSymbolsCommand>$(NuGetCommand) push "$(PackageOutputDir)\$(PackageSymbolsOutput)" $(_NugetApiKey) -source "$(NugetRepository)"</PublishSymbolsCommand>
  </PropertyGroup>

  <Target Name="PublishPackage" Condition="'$(PublishPackage)' == 'true'">
	<!--<Exec Command="$(PublishCommand)" LogStandardErrorAsError="true" />-->
	<Exec Command="$(PublishSymbolsCommand)" LogStandardErrorAsError="true" />
  </Target>

  <Target Name="BuildPackageCustom" Condition="$(BuildPackageCustom) == 'true'">
    <Exec Command="$(BuildCommandSolution)" LogStandardErrorAsError="true" />
  </Target>

</Project>
